// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `api.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct AuthRequest {
    // message fields
    pub password: ::std::string::String,
    pub user_name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AuthRequest {
    fn default() -> &'a AuthRequest {
        <AuthRequest as ::protobuf::Message>::default_instance()
    }
}

impl AuthRequest {
    pub fn new() -> AuthRequest {
        ::std::default::Default::default()
    }

    // string password = 1;


    pub fn get_password(&self) -> &str {
        &self.password
    }
    pub fn clear_password(&mut self) {
        self.password.clear();
    }

    // Param is passed by value, moved
    pub fn set_password(&mut self, v: ::std::string::String) {
        self.password = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_password(&mut self) -> &mut ::std::string::String {
        &mut self.password
    }

    // Take field
    pub fn take_password(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.password, ::std::string::String::new())
    }

    // string user_name = 2;


    pub fn get_user_name(&self) -> &str {
        &self.user_name
    }
    pub fn clear_user_name(&mut self) {
        self.user_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_user_name(&mut self, v: ::std::string::String) {
        self.user_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_user_name(&mut self) -> &mut ::std::string::String {
        &mut self.user_name
    }

    // Take field
    pub fn take_user_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.user_name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for AuthRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.password)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.user_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.password.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.password);
        }
        if !self.user_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.user_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.password.is_empty() {
            os.write_string(1, &self.password)?;
        }
        if !self.user_name.is_empty() {
            os.write_string(2, &self.user_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AuthRequest {
        AuthRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "password",
                |m: &AuthRequest| { &m.password },
                |m: &mut AuthRequest| { &mut m.password },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "user_name",
                |m: &AuthRequest| { &m.user_name },
                |m: &mut AuthRequest| { &mut m.user_name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AuthRequest>(
                "AuthRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AuthRequest {
        static instance: ::protobuf::rt::LazyV2<AuthRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AuthRequest::new)
    }
}

impl ::protobuf::Clear for AuthRequest {
    fn clear(&mut self) {
        self.password.clear();
        self.user_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AuthRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Empty {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Empty {
    fn default() -> &'a Empty {
        <Empty as ::protobuf::Message>::default_instance()
    }
}

impl Empty {
    pub fn new() -> Empty {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Empty {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Empty {
        Empty::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Empty>(
                "Empty",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Empty {
        static instance: ::protobuf::rt::LazyV2<Empty> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Empty::new)
    }
}

impl ::protobuf::Clear for Empty {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Empty {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Empty {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AuthResponse {
    // message fields
    pub groups: ::protobuf::RepeatedField<::std::string::String>,
    pub expires_at: i64,
    pub passthrough: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AuthResponse {
    fn default() -> &'a AuthResponse {
        <AuthResponse as ::protobuf::Message>::default_instance()
    }
}

impl AuthResponse {
    pub fn new() -> AuthResponse {
        ::std::default::Default::default()
    }

    // repeated string groups = 1;


    pub fn get_groups(&self) -> &[::std::string::String] {
        &self.groups
    }
    pub fn clear_groups(&mut self) {
        self.groups.clear();
    }

    // Param is passed by value, moved
    pub fn set_groups(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.groups = v;
    }

    // Mutable pointer to the field.
    pub fn mut_groups(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.groups
    }

    // Take field
    pub fn take_groups(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.groups, ::protobuf::RepeatedField::new())
    }

    // int64 expires_at = 2;


    pub fn get_expires_at(&self) -> i64 {
        self.expires_at
    }
    pub fn clear_expires_at(&mut self) {
        self.expires_at = 0;
    }

    // Param is passed by value, moved
    pub fn set_expires_at(&mut self, v: i64) {
        self.expires_at = v;
    }

    // bool passthrough = 3;


    pub fn get_passthrough(&self) -> bool {
        self.passthrough
    }
    pub fn clear_passthrough(&mut self) {
        self.passthrough = false;
    }

    // Param is passed by value, moved
    pub fn set_passthrough(&mut self, v: bool) {
        self.passthrough = v;
    }
}

impl ::protobuf::Message for AuthResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.groups)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.expires_at = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.passthrough = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.groups {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        if self.expires_at != 0 {
            my_size += ::protobuf::rt::value_size(2, self.expires_at, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.passthrough != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.groups {
            os.write_string(1, &v)?;
        };
        if self.expires_at != 0 {
            os.write_int64(2, self.expires_at)?;
        }
        if self.passthrough != false {
            os.write_bool(3, self.passthrough)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AuthResponse {
        AuthResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "groups",
                |m: &AuthResponse| { &m.groups },
                |m: &mut AuthResponse| { &mut m.groups },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "expires_at",
                |m: &AuthResponse| { &m.expires_at },
                |m: &mut AuthResponse| { &mut m.expires_at },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "passthrough",
                |m: &AuthResponse| { &m.passthrough },
                |m: &mut AuthResponse| { &mut m.passthrough },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AuthResponse>(
                "AuthResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AuthResponse {
        static instance: ::protobuf::rt::LazyV2<AuthResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AuthResponse::new)
    }
}

impl ::protobuf::Clear for AuthResponse {
    fn clear(&mut self) {
        self.groups.clear();
        self.expires_at = 0;
        self.passthrough = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AuthResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DataSourceResponse {
    // message fields
    pub data_source_name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DataSourceResponse {
    fn default() -> &'a DataSourceResponse {
        <DataSourceResponse as ::protobuf::Message>::default_instance()
    }
}

impl DataSourceResponse {
    pub fn new() -> DataSourceResponse {
        ::std::default::Default::default()
    }

    // string data_source_name = 1;


    pub fn get_data_source_name(&self) -> &str {
        &self.data_source_name
    }
    pub fn clear_data_source_name(&mut self) {
        self.data_source_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_data_source_name(&mut self, v: ::std::string::String) {
        self.data_source_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data_source_name(&mut self) -> &mut ::std::string::String {
        &mut self.data_source_name
    }

    // Take field
    pub fn take_data_source_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.data_source_name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DataSourceResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.data_source_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.data_source_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.data_source_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.data_source_name.is_empty() {
            os.write_string(1, &self.data_source_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DataSourceResponse {
        DataSourceResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "data_source_name",
                |m: &DataSourceResponse| { &m.data_source_name },
                |m: &mut DataSourceResponse| { &mut m.data_source_name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DataSourceResponse>(
                "DataSourceResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DataSourceResponse {
        static instance: ::protobuf::rt::LazyV2<DataSourceResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DataSourceResponse::new)
    }
}

impl ::protobuf::Clear for DataSourceResponse {
    fn clear(&mut self) {
        self.data_source_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DataSourceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DataSourceResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct InspektorPolicy {
    // message fields
    pub wasm_byte_code: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InspektorPolicy {
    fn default() -> &'a InspektorPolicy {
        <InspektorPolicy as ::protobuf::Message>::default_instance()
    }
}

impl InspektorPolicy {
    pub fn new() -> InspektorPolicy {
        ::std::default::Default::default()
    }

    // bytes wasm_byte_code = 1;


    pub fn get_wasm_byte_code(&self) -> &[u8] {
        &self.wasm_byte_code
    }
    pub fn clear_wasm_byte_code(&mut self) {
        self.wasm_byte_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_wasm_byte_code(&mut self, v: ::std::vec::Vec<u8>) {
        self.wasm_byte_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_wasm_byte_code(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.wasm_byte_code
    }

    // Take field
    pub fn take_wasm_byte_code(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.wasm_byte_code, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for InspektorPolicy {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.wasm_byte_code)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.wasm_byte_code.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.wasm_byte_code);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.wasm_byte_code.is_empty() {
            os.write_bytes(1, &self.wasm_byte_code)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InspektorPolicy {
        InspektorPolicy::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "wasm_byte_code",
                |m: &InspektorPolicy| { &m.wasm_byte_code },
                |m: &mut InspektorPolicy| { &mut m.wasm_byte_code },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<InspektorPolicy>(
                "InspektorPolicy",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static InspektorPolicy {
        static instance: ::protobuf::rt::LazyV2<InspektorPolicy> = ::protobuf::rt::LazyV2::INIT;
        instance.get(InspektorPolicy::new)
    }
}

impl ::protobuf::Clear for InspektorPolicy {
    fn clear(&mut self) {
        self.wasm_byte_code.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InspektorPolicy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InspektorPolicy {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MetricsRequest {
    // message fields
    pub metrics: ::protobuf::RepeatedField<Metric>,
    pub groups: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MetricsRequest {
    fn default() -> &'a MetricsRequest {
        <MetricsRequest as ::protobuf::Message>::default_instance()
    }
}

impl MetricsRequest {
    pub fn new() -> MetricsRequest {
        ::std::default::Default::default()
    }

    // repeated .api.Metric metrics = 1;


    pub fn get_metrics(&self) -> &[Metric] {
        &self.metrics
    }
    pub fn clear_metrics(&mut self) {
        self.metrics.clear();
    }

    // Param is passed by value, moved
    pub fn set_metrics(&mut self, v: ::protobuf::RepeatedField<Metric>) {
        self.metrics = v;
    }

    // Mutable pointer to the field.
    pub fn mut_metrics(&mut self) -> &mut ::protobuf::RepeatedField<Metric> {
        &mut self.metrics
    }

    // Take field
    pub fn take_metrics(&mut self) -> ::protobuf::RepeatedField<Metric> {
        ::std::mem::replace(&mut self.metrics, ::protobuf::RepeatedField::new())
    }

    // repeated string groups = 2;


    pub fn get_groups(&self) -> &[::std::string::String] {
        &self.groups
    }
    pub fn clear_groups(&mut self) {
        self.groups.clear();
    }

    // Param is passed by value, moved
    pub fn set_groups(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.groups = v;
    }

    // Mutable pointer to the field.
    pub fn mut_groups(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.groups
    }

    // Take field
    pub fn take_groups(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.groups, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for MetricsRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.metrics {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.metrics)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.groups)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.metrics {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.groups {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.metrics {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.groups {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MetricsRequest {
        MetricsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Metric>>(
                "metrics",
                |m: &MetricsRequest| { &m.metrics },
                |m: &mut MetricsRequest| { &mut m.metrics },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "groups",
                |m: &MetricsRequest| { &m.groups },
                |m: &mut MetricsRequest| { &mut m.groups },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MetricsRequest>(
                "MetricsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MetricsRequest {
        static instance: ::protobuf::rt::LazyV2<MetricsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MetricsRequest::new)
    }
}

impl ::protobuf::Clear for MetricsRequest {
    fn clear(&mut self) {
        self.metrics.clear();
        self.groups.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MetricsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetricsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Metric {
    // message fields
    pub collection_name: ::std::string::String,
    pub property_name: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Metric {
    fn default() -> &'a Metric {
        <Metric as ::protobuf::Message>::default_instance()
    }
}

impl Metric {
    pub fn new() -> Metric {
        ::std::default::Default::default()
    }

    // string collection_name = 1;


    pub fn get_collection_name(&self) -> &str {
        &self.collection_name
    }
    pub fn clear_collection_name(&mut self) {
        self.collection_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_collection_name(&mut self, v: ::std::string::String) {
        self.collection_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_collection_name(&mut self) -> &mut ::std::string::String {
        &mut self.collection_name
    }

    // Take field
    pub fn take_collection_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.collection_name, ::std::string::String::new())
    }

    // repeated string property_name = 2;


    pub fn get_property_name(&self) -> &[::std::string::String] {
        &self.property_name
    }
    pub fn clear_property_name(&mut self) {
        self.property_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_property_name(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.property_name = v;
    }

    // Mutable pointer to the field.
    pub fn mut_property_name(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.property_name
    }

    // Take field
    pub fn take_property_name(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.property_name, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Metric {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.collection_name)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.property_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.collection_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.collection_name);
        }
        for value in &self.property_name {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.collection_name.is_empty() {
            os.write_string(1, &self.collection_name)?;
        }
        for v in &self.property_name {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Metric {
        Metric::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "collection_name",
                |m: &Metric| { &m.collection_name },
                |m: &mut Metric| { &mut m.collection_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "property_name",
                |m: &Metric| { &m.property_name },
                |m: &mut Metric| { &mut m.property_name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Metric>(
                "Metric",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Metric {
        static instance: ::protobuf::rt::LazyV2<Metric> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Metric::new)
    }
}

impl ::protobuf::Clear for Metric {
    fn clear(&mut self) {
        self.collection_name.clear();
        self.property_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Metric {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Metric {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct IntegrationConfigResponse {
    // message fields
    pub cloud_watch_config: ::protobuf::SingularPtrField<CloudWatchConfig>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IntegrationConfigResponse {
    fn default() -> &'a IntegrationConfigResponse {
        <IntegrationConfigResponse as ::protobuf::Message>::default_instance()
    }
}

impl IntegrationConfigResponse {
    pub fn new() -> IntegrationConfigResponse {
        ::std::default::Default::default()
    }

    // .api.CloudWatchConfig cloud_watch_config = 1;


    pub fn get_cloud_watch_config(&self) -> &CloudWatchConfig {
        self.cloud_watch_config.as_ref().unwrap_or_else(|| <CloudWatchConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_cloud_watch_config(&mut self) {
        self.cloud_watch_config.clear();
    }

    pub fn has_cloud_watch_config(&self) -> bool {
        self.cloud_watch_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cloud_watch_config(&mut self, v: CloudWatchConfig) {
        self.cloud_watch_config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cloud_watch_config(&mut self) -> &mut CloudWatchConfig {
        if self.cloud_watch_config.is_none() {
            self.cloud_watch_config.set_default();
        }
        self.cloud_watch_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_cloud_watch_config(&mut self) -> CloudWatchConfig {
        self.cloud_watch_config.take().unwrap_or_else(|| CloudWatchConfig::new())
    }
}

impl ::protobuf::Message for IntegrationConfigResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.cloud_watch_config {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cloud_watch_config)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.cloud_watch_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.cloud_watch_config.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IntegrationConfigResponse {
        IntegrationConfigResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CloudWatchConfig>>(
                "cloud_watch_config",
                |m: &IntegrationConfigResponse| { &m.cloud_watch_config },
                |m: &mut IntegrationConfigResponse| { &mut m.cloud_watch_config },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<IntegrationConfigResponse>(
                "IntegrationConfigResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static IntegrationConfigResponse {
        static instance: ::protobuf::rt::LazyV2<IntegrationConfigResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(IntegrationConfigResponse::new)
    }
}

impl ::protobuf::Clear for IntegrationConfigResponse {
    fn clear(&mut self) {
        self.cloud_watch_config.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for IntegrationConfigResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IntegrationConfigResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CloudWatchConfig {
    // message fields
    pub cred_type: ::std::string::String,
    pub region_name: ::std::string::String,
    pub access_key: ::std::string::String,
    pub secret_key: ::std::string::String,
    pub log_group_name: ::std::string::String,
    pub log_stream_name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CloudWatchConfig {
    fn default() -> &'a CloudWatchConfig {
        <CloudWatchConfig as ::protobuf::Message>::default_instance()
    }
}

impl CloudWatchConfig {
    pub fn new() -> CloudWatchConfig {
        ::std::default::Default::default()
    }

    // string cred_type = 1;


    pub fn get_cred_type(&self) -> &str {
        &self.cred_type
    }
    pub fn clear_cred_type(&mut self) {
        self.cred_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_cred_type(&mut self, v: ::std::string::String) {
        self.cred_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cred_type(&mut self) -> &mut ::std::string::String {
        &mut self.cred_type
    }

    // Take field
    pub fn take_cred_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cred_type, ::std::string::String::new())
    }

    // string region_name = 2;


    pub fn get_region_name(&self) -> &str {
        &self.region_name
    }
    pub fn clear_region_name(&mut self) {
        self.region_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_region_name(&mut self, v: ::std::string::String) {
        self.region_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_region_name(&mut self) -> &mut ::std::string::String {
        &mut self.region_name
    }

    // Take field
    pub fn take_region_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.region_name, ::std::string::String::new())
    }

    // string access_key = 3;


    pub fn get_access_key(&self) -> &str {
        &self.access_key
    }
    pub fn clear_access_key(&mut self) {
        self.access_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_access_key(&mut self, v: ::std::string::String) {
        self.access_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_access_key(&mut self) -> &mut ::std::string::String {
        &mut self.access_key
    }

    // Take field
    pub fn take_access_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.access_key, ::std::string::String::new())
    }

    // string secret_key = 4;


    pub fn get_secret_key(&self) -> &str {
        &self.secret_key
    }
    pub fn clear_secret_key(&mut self) {
        self.secret_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_secret_key(&mut self, v: ::std::string::String) {
        self.secret_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_secret_key(&mut self) -> &mut ::std::string::String {
        &mut self.secret_key
    }

    // Take field
    pub fn take_secret_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.secret_key, ::std::string::String::new())
    }

    // string log_group_name = 5;


    pub fn get_log_group_name(&self) -> &str {
        &self.log_group_name
    }
    pub fn clear_log_group_name(&mut self) {
        self.log_group_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_log_group_name(&mut self, v: ::std::string::String) {
        self.log_group_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_log_group_name(&mut self) -> &mut ::std::string::String {
        &mut self.log_group_name
    }

    // Take field
    pub fn take_log_group_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.log_group_name, ::std::string::String::new())
    }

    // string log_stream_name = 6;


    pub fn get_log_stream_name(&self) -> &str {
        &self.log_stream_name
    }
    pub fn clear_log_stream_name(&mut self) {
        self.log_stream_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_log_stream_name(&mut self, v: ::std::string::String) {
        self.log_stream_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_log_stream_name(&mut self) -> &mut ::std::string::String {
        &mut self.log_stream_name
    }

    // Take field
    pub fn take_log_stream_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.log_stream_name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CloudWatchConfig {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cred_type)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.region_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.access_key)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.secret_key)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.log_group_name)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.log_stream_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.cred_type.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.cred_type);
        }
        if !self.region_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.region_name);
        }
        if !self.access_key.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.access_key);
        }
        if !self.secret_key.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.secret_key);
        }
        if !self.log_group_name.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.log_group_name);
        }
        if !self.log_stream_name.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.log_stream_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.cred_type.is_empty() {
            os.write_string(1, &self.cred_type)?;
        }
        if !self.region_name.is_empty() {
            os.write_string(2, &self.region_name)?;
        }
        if !self.access_key.is_empty() {
            os.write_string(3, &self.access_key)?;
        }
        if !self.secret_key.is_empty() {
            os.write_string(4, &self.secret_key)?;
        }
        if !self.log_group_name.is_empty() {
            os.write_string(5, &self.log_group_name)?;
        }
        if !self.log_stream_name.is_empty() {
            os.write_string(6, &self.log_stream_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CloudWatchConfig {
        CloudWatchConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cred_type",
                |m: &CloudWatchConfig| { &m.cred_type },
                |m: &mut CloudWatchConfig| { &mut m.cred_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "region_name",
                |m: &CloudWatchConfig| { &m.region_name },
                |m: &mut CloudWatchConfig| { &mut m.region_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "access_key",
                |m: &CloudWatchConfig| { &m.access_key },
                |m: &mut CloudWatchConfig| { &mut m.access_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "secret_key",
                |m: &CloudWatchConfig| { &m.secret_key },
                |m: &mut CloudWatchConfig| { &mut m.secret_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "log_group_name",
                |m: &CloudWatchConfig| { &m.log_group_name },
                |m: &mut CloudWatchConfig| { &mut m.log_group_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "log_stream_name",
                |m: &CloudWatchConfig| { &m.log_stream_name },
                |m: &mut CloudWatchConfig| { &mut m.log_stream_name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CloudWatchConfig>(
                "CloudWatchConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CloudWatchConfig {
        static instance: ::protobuf::rt::LazyV2<CloudWatchConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CloudWatchConfig::new)
    }
}

impl ::protobuf::Clear for CloudWatchConfig {
    fn clear(&mut self) {
        self.cred_type.clear();
        self.region_name.clear();
        self.access_key.clear();
        self.secret_key.clear();
        self.log_group_name.clear();
        self.log_stream_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CloudWatchConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CloudWatchConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\tapi.proto\x12\x03api\"F\n\x0bAuthRequest\x12\x1a\n\x08password\x18\
    \x01\x20\x01(\tR\x08password\x12\x1b\n\tuser_name\x18\x02\x20\x01(\tR\
    \x08userName\"\x07\n\x05Empty\"g\n\x0cAuthResponse\x12\x16\n\x06groups\
    \x18\x01\x20\x03(\tR\x06groups\x12\x1d\n\nexpires_at\x18\x02\x20\x01(\
    \x03R\texpiresAt\x12\x20\n\x0bpassthrough\x18\x03\x20\x01(\x08R\x0bpasst\
    hrough\">\n\x12DataSourceResponse\x12(\n\x10data_source_name\x18\x01\x20\
    \x01(\tR\x0edataSourceName\"7\n\x0fInspektorPolicy\x12$\n\x0ewasm_byte_c\
    ode\x18\x01\x20\x01(\x0cR\x0cwasmByteCode\"O\n\x0eMetricsRequest\x12%\n\
    \x07metrics\x18\x01\x20\x03(\x0b2\x0b.api.MetricR\x07metrics\x12\x16\n\
    \x06groups\x18\x02\x20\x03(\tR\x06groups\"V\n\x06Metric\x12'\n\x0fcollec\
    tion_name\x18\x01\x20\x01(\tR\x0ecollectionName\x12#\n\rproperty_name\
    \x18\x02\x20\x03(\tR\x0cpropertyName\"`\n\x19IntegrationConfigResponse\
    \x12C\n\x12cloud_watch_config\x18\x01\x20\x01(\x0b2\x15.api.CloudWatchCo\
    nfigR\x10cloudWatchConfig\"\xdc\x01\n\x10CloudWatchConfig\x12\x1b\n\tcre\
    d_type\x18\x01\x20\x01(\tR\x08credType\x12\x1f\n\x0bregion_name\x18\x02\
    \x20\x01(\tR\nregionName\x12\x1d\n\naccess_key\x18\x03\x20\x01(\tR\tacce\
    ssKey\x12\x1d\n\nsecret_key\x18\x04\x20\x01(\tR\tsecretKey\x12$\n\x0elog\
    _group_name\x18\x05\x20\x01(\tR\x0clogGroupName\x12&\n\x0flog_stream_nam\
    e\x18\x06\x20\x01(\tR\rlogStreamName2\x9a\x02\n\tInspektor\x12-\n\x04Aut\
    h\x12\x10.api.AuthRequest\x1a\x11.api.AuthResponse\"\0\x12.\n\x06Policy\
    \x12\n.api.Empty\x1a\x14.api.InspektorPolicy\"\00\x01\x126\n\rGetDataSou\
    rce\x12\n.api.Empty\x1a\x17.api.DataSourceResponse\"\0\x120\n\x0bSendMet\
    rics\x12\x13.api.MetricsRequest\x1a\n.api.Empty\"\0\x12D\n\x14GetIntegra\
    tionConfig\x12\n.api.Empty\x1a\x1e.api.IntegrationConfigResponse\"\0B\
    \x17Z\x15controlplane/apiprotob\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
